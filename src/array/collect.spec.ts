import { collect } from './collect'

describe('collect-args', () => {
  it('should call the function with an array of the parameter', () => {
    const fn = jest.fn()
    const newFn = collect(fn)
    expect(fn).toBeCalledTimes(0)
    newFn('Hello')
    expect(fn).toBeCalledTimes(1)
    expect(fn).toBeCalledWith(['Hello'])
    newFn('Hello Again')
    expect(fn).toBeCalledTimes(2)
    expect(fn).toBeCalledWith(['Hello Again', 'Hello'])
  })
  it('should call the function with an array of the parameter in reverse order when option order was set', () => {
    const fn = jest.fn()
    const newFn = collect(fn, { order: 'push' })
    expect(fn).toBeCalledTimes(0)
    newFn('Hello')
    expect(fn).toBeCalledTimes(1)
    expect(fn).toBeCalledWith(['Hello'])
    newFn('Hello Again')
    expect(fn).toBeCalledTimes(2)
    expect(fn).toBeCalledWith(['Hello', 'Hello Again'])
  })
  it('should forget args when overflow is reached', () => {
    const fn = jest.fn()
    const newFn = collect<number>(fn, { overflow: 3 })
    newFn(1)
    newFn(2)
    newFn(3)
    expect(fn).toBeCalledWith([3, 2, 1])
    newFn(4)
    expect(fn).toBeCalledWith([4, 3, 2])
  })
  it('should forget args when overflow is reached (push)', () => {
    const fn = jest.fn()
    const newFn = collect<number>(fn, { order: 'push', overflow: 3 })
    newFn(1)
    newFn(2)
    newFn(3)
    expect(fn).toBeCalledWith([1, 2, 3])
    newFn(4)
    expect(fn).toBeCalledWith([2, 3, 4])
  })
})
